on: [push, pull_request]

name: Go
jobs:

  test:
    strategy:
      matrix:
        go-version: [1.12.x, 1.13.x]
        platform: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    steps:
    - name: Install Go
      uses: actions/setup-go@v1
      with:
        go-version: ${{ matrix.go-version }}
    - name: Checkout code
      uses: actions/checkout@v1
    - name: Test
      run: go test -count=1 ./...
    - name: Test with -short -race
      run: go test -short -race -count=1 ./...

    - name: gofmt check
      run: diff <(echo -n) <(gofmt -d .)
      if: matrix.platform == 'ubuntu-latest'

  test-linux-alpine:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v1
    - name: Test as root, without cgo, and with busybox
      run: docker run -v=$PWD:/pwd golang:1.13-alpine3.11 sh -c 'export CGO_ENABLED=0; cd /pwd && go test ./...'

  fuzz:
    runs-on: ubuntu-latest
    steps:
    - name: Install Go
      uses: actions/setup-go@v1
      with:
        go-version: 1.13.x
    - name: Checkout code
      uses: actions/checkout@v1

    - name: fuzz regression tests
      run: export PATH="$PATH:$(go env GOPATH)/bin"; cd _fuzz/it && ./fuzz-ci local-regression
    - name: fuzz continuous job
      run: export PATH="$PATH:$(go env GOPATH)/bin"; cd _fuzz/it && ./fuzz-ci fuzzing
      if: >
        github.event_name == 'push' &&
        github.ref == 'refs/heads/master' &&
        github.repository == 'mvdan/sh'
      env:
        FUZZIT_API_KEY: ${{ secrets.FUZZIT_API_KEY }}

  docker:
    name: Build and deploy Docker images
    # Only deploy if previous stages pass.
    needs: [test, test-linux-alpine, fuzz]
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'push' &&
        (github.ref == 'refs/heads/master' ||
         startsWith(github.ref, 'refs/tags/')) &&
      github.repository == 'mvdan/sh'
    env:
      # Export environment variables for all stages.
      DOCKER_CLI_EXPERIMENTAL: enabled # for 'docker buildx'
      DOCKER_BASE: mvdan/shfmt
      DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
      # We use all platforms for which FROM images in our Dockerfile are
      # available.
      DOCKER_PLATFORMS: >
        linux/386
        linux/amd64
        linux/arm/v6
        linux/arm/v7
        linux/arm64/v8
        linux/ppc64le
        linux/s390x
    steps:
    - name: Checkout code
      uses: actions/checkout@v1
      with:
        fetch-depth: 1  # no history, just HEAD
    - name: Set up image tag
      run: |
        set -vx
        # Export environment variable for later stages.
        if echo "$GITHUB_REF" | grep -q '^refs/heads/'; then
          # Pushes to (master) branch - deploy 'latest'.
          echo "::set-env name=TAG::latest"
        elif echo "$GITHUB_REF" | grep -q '^refs/tags/'; then
          # Pushes tag - deploy tag name.
          echo "::set-env name=TAG::${GITHUB_REF/refs\/tags\//}"
        fi
    - name: Install Docker buildx
      run: |
        set -vx
        # Install up-to-date version of docker, with buildx support.
        docker_apt_repo='https://download.docker.com/linux/ubuntu'
        curl -fsSL "${docker_apt_repo}/gpg" | sudo apt-key add -
        os="$(lsb_release -cs)"
        sudo add-apt-repository "deb [arch=amd64] $docker_apt_repo $os stable"
        sudo apt-get update
        sudo apt-get -y -o Dpkg::Options::="--force-confnew" install docker-ce

        # Enable docker daemon experimental support (for 'pull --platform').
        config='/etc/docker/daemon.json'
        if [[ -e "$config" ]]; then
          sudo sed -i -e 's/{/{ "experimental": true, /' "$config"
        else
          echo '{ "experimental": true }' | sudo tee "$config"
        fi
        sudo systemctl restart docker

        # Install QEMU multi-architecture support for docker buildx.
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

        # Instantiate docker buildx builder with multi-architecture support.
        docker buildx create --name mybuilder
        docker buildx use mybuilder
        # Start up buildx and verify that all is OK.
        docker buildx inspect --bootstrap
    - name: Build multi-architecture Docker images with buildx
      run: |
        set -vx
        username=${DOCKER_BASE/\/*/}
        echo "$DOCKER_PASSWORD" | docker login -u="$username" --password-stdin

        function buildx() {
          docker buildx build \
            --platform ${DOCKER_PLATFORMS// /,} \
            --push \
            -f cmd/shfmt/Dockerfile \
            "$@" \
            .
        }

        buildx -t "$DOCKER_BASE:$TAG"
        buildx -t "$DOCKER_BASE-alpine:$TAG" --target alpine
    - name: Test multi-architecture Docker images
      run: |
        printf '%s\n' "#!/bin/sh" "echo 'hello world'" >myscript

        for platform in $DOCKER_PLATFORMS; do
          for ext in '-alpine' ''; do
            image="${DOCKER_BASE}${ext}:${TAG}"
            msg="Testing docker image $image on platform $platform"
            line="${msg//?/=}"
            printf "\n${line}\n${msg}\n${line}\n"
            docker pull -q --platform "$platform" "$image"
            if [ -n "$ext" ]; then
              echo -n "Image architecture: "
              docker run --rm --entrypoint /bin/sh "$image" -c 'uname -m'
            fi
            version=$(docker run --rm "$image" --version)
            echo "shfmt version: $version"
            if [ "$TAG" != 'latest' -a "$TAG" != "$version" ]; then
              echo "Version mismatch: shfmt $version tagged as $TAG"
              exit 1
            fi
            docker run --rm -v "$PWD:/mnt" -w '/mnt' "$image" -d myscript
          done
        done
